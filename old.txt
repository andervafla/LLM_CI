provider "aws" {
  region = "us-east-1"
}

resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
}

terraform {
   backend "s3" {
    bucket = "tfstate23545345"
    key    = "terraform.tfstate"
    region = "us-east-1"
  }
}

resource "aws_subnet" "public_subnet_1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "us-east-1a"
}

resource "aws_subnet" "public_subnet_2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.2.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "us-east-1b"
}

resource "aws_subnet" "private_subnet" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.3.0/24"
  availability_zone = "us-east-1a"
}

resource "aws_subnet" "private_subnet_2" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.4.0/24"
  availability_zone = "us-east-1b"
}

resource "aws_subnet" "private_subnet_rds" {
  vpc_id = aws_vpc.main.id
  cidr_block = "10.0.5.0/24"
  availability_zone = "us-east-1a"
}

resource "aws_subnet" "private_subnet_rds_2" {
  vpc_id     = aws_vpc.main.id
  cidr_block = "10.0.6.0/24"
  availability_zone = "us-east-1b"
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id
}

resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
}

resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public_subnet_1.id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_route_table_association" "public_2" {
  subnet_id      = aws_subnet.public_subnet_2.id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_eip" "nat" {
  domain = "vpc"
}

resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.public_subnet_1.id

  tags = {
    Name = "NAT Gateway"
  }
}

resource "aws_route_table" "private_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat.id
  }
}

resource "aws_route_table_association" "private_1" {
  subnet_id      = aws_subnet.private_subnet.id
  route_table_id = aws_route_table.private_rt.id
}

resource "aws_route_table_association" "private_2" {
  subnet_id      = aws_subnet.private_subnet_2.id
  route_table_id = aws_route_table.private_rt.id
}

resource "aws_route_table_association" "private_rds" {
  subnet_id = aws_subnet.private_subnet_rds.id
  route_table_id = aws_route_table.private_rt.id
}

resource "aws_security_group" "bastion_sg" {
  vpc_id = aws_vpc.main.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [var.my_ip]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "private_sg" {
  vpc_id = aws_vpc.main.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    security_groups = [aws_security_group.bastion_sg.id]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 3000
    to_port     = 3000
    protocol    = "tcp"
    security_groups = [aws_security_group.alb_sg.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_key_pair" "my_key" {
  key_name   = "my-key"
  public_key = file("key/my-key.pub")
}

resource "aws_instance" "bastion" {
  ami                    = var.ami_id
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.public_subnet_1.id
  vpc_security_group_ids = [aws_security_group.bastion_sg.id]
  key_name               = var.key_name

  tags = {
    Name = "Bastion Host"
  }
}


resource "aws_lb" "main" {
  name               = "main-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb_sg.id]
  subnets            = [aws_subnet.public_subnet_1.id, aws_subnet.public_subnet_2.id]
  enable_deletion_protection = false

}

resource "aws_security_group" "alb_sg" {
  vpc_id = aws_vpc.main.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

   ingress {
    from_port   = 3000
    to_port     = 3000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}


resource "aws_lb_target_group" "tg" {
  name     = "main-tg"
  port     = 3000
  protocol = "HTTP"
  vpc_id   = aws_vpc.main.id

  health_check {
    path                = "/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }

  stickiness {
  type            = "lb_cookie"
  cookie_duration = 300
}

}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.main.arn
  port              = "3000"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg.arn
  }
}

resource "aws_launch_template" "launch_template" {
  name          = "launch-template"
  image_id      = var.ami_id
  instance_type = "t3.xlarge"
  key_name      = var.key_name

  network_interfaces {
    security_groups = [aws_security_group.private_sg.id] 
    associate_public_ip_address = false
  }

  block_device_mappings {
    device_name = "/dev/sda1"
    ebs {
      volume_size = 30 
      volume_type = "gp3"
      delete_on_termination = true
    }
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_autoscaling_group" "asg" {
  desired_capacity     = 2
  max_size             = 3
  min_size             = 1
  vpc_zone_identifier  = [aws_subnet.private_subnet.id, aws_subnet.private_subnet_2.id]

  launch_template {
    name    = aws_launch_template.launch_template.name
    version = "$Latest"
  }

  target_group_arns = [aws_lb_target_group.tg.arn]

  tag {
    key                 = "Name"
    value               = "AutoScaling EC2"
    propagate_at_launch = true
  }
}

resource "aws_security_group" "rds_sg" {
  vpc_id = aws_vpc.main.id

  ingress {
    from_port = 5432
    to_port = 5432
    protocol = "tcp"
    security_groups = [aws_security_group.private_sg.id]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_db_instance" "rds_instance" {
  allocated_storage = 20
  engine = "postgres"
  engine_version = "15"
  instance_class = "db.t3.micro"
  db_name = "mydatabase"
  username = "dbuser"
  password = "password"
  parameter_group_name = "default.postgres15"
  skip_final_snapshot = true
  publicly_accessible = false
  vpc_security_group_ids = [aws_security_group.rds_sg.id]
  db_subnet_group_name  = aws_db_subnet_group.rds_subnet_group.name
}

resource "aws_db_subnet_group" "rds_subnet_group" {
  name       = "rds-subnet-group"
  subnet_ids = [aws_subnet.private_subnet_rds.id, aws_subnet.private_subnet_rds_2.id]
}






,....................................


resource "aws_lb" "main" {
  name               = "main-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb_sg.id]
  subnets            = values(aws_subnet.public)[*].id
  enable_deletion_protection = false

  tags = {
    Name = "Application Load Balancer"
  }
}

# Security Group для ALB
resource "aws_security_group" "alb_sg" {
  vpc_id = aws_vpc.main.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 3000
    to_port     = 3000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "ALB Security Group"
  }
}

# Основна Target Group (на порті 80)
resource "aws_lb_target_group" "tg" {
  name     = "main-tg"
  port     = 80  # Основний порт
  protocol = "HTTP"
  vpc_id   = aws_vpc.main.id

  health_check {
    path                = "/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }

  stickiness {
    type            = "lb_cookie"
    cookie_duration = 300
  }
}

# Listener для основного сервісу на порту 80
resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.main.arn
  port              = "80"
  protocol          = "HTTP"

  # Правило по умовчанні - для всіх запитів, які не підходять під /monitoring
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg.arn  # Перенаправляє на основну Target Group
  }

  tags = {
    Name = "HTTP Listener"
  }
}

# Target Group для моніторингу (на порті 3000)
resource "aws_lb_target_group" "monitoring_tg" {
  name     = "monitoring-tg"
  port     = 3000
  protocol = "HTTP"
  vpc_id   = aws_vpc.main.id

  health_check {
    path                = "/api/health"  # Використовуємо /api/health для перевірки здоров'я
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }

  stickiness {
    type            = "lb_cookie"
    cookie_duration = 300
  }
}

# Прив'язка моніторингової інстанції до Target Group
resource "aws_lb_target_group_attachment" "monitoring_tg_attachment" {
  target_group_arn = aws_lb_target_group.monitoring_tg.arn
  target_id        = aws_instance.monitoring_instance.id 
  port             = 3000  
}

# Правило маршрутизації для шляху /monitoring
resource "aws_lb_listener_rule" "monitoring_path_rule" {
  listener_arn = aws_lb_listener.http.arn  
  priority     = 1  # Пріоритет для цього правила

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.monitoring_tg.arn  # Перенаправляє запити на /monitoring
  }

  condition {
    path_pattern {
      values = ["/monitoring", "/monitoring/*"]  # Якщо шлях /monitoring або підшляхи /monitoring/*, перенаправляє на Target Group для моніторингу
    }
  }

  tags = {
    Name = "Monitoring Path Rule"
  }
}




name: CI

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.11.0"

      - name: Check Terraform version
        run: terraform version

      - name: Terraform init
        run: terraform init
      
      - name: Terraform plan
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: terraform plan -input=false

      - name: Apply Terraform configuration
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: terraform apply -auto-approve



resource "aws_ssm_document" "grafana_setup" {
  name          = "grafana-setup-script"
  document_type = "Command"

  content = <<EOF
{
  "schemaVersion": "2.2",
  "description": "Install Grafana Agent and configure remote write",
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "runShellScript",
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "sudo mkdir -p /etc/apt/keyrings/",
          "wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null",
          "echo \"deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main\" | sudo tee /etc/apt/sources.list.d/grafana.list",
          "sudo apt-get update",
          "sudo apt-get install -y grafana-agent-flow",
          "sudo tee /etc/grafana-agent-flow.river > /dev/null <<EOF",

          "logging {",
          "  level = \"info\"",
          "}",
          "prometheus.exporter.unix \"default\" {",
          "  include_exporter_metrics = true",
          "  enable_collectors = [\"systemd\"]",
          "}",
          "prometheus.scrape \"default\" {",
          "  scrape_interval = \"15s\"",
          "  scrape_timeout  = \"10s\"",
          "  targets = prometheus.exporter.unix.default.targets",
          "  forward_to = [prometheus.remote_write.default.receiver]",
          "}",
          "prometheus.remote_write \"default\" {",
          "  endpoint {",
          "    url = \"http://:9090/api/v1/write\"",
          "  }",
          "}",
          "EOF",
          "sudo systemctl restart grafana-agent"
        ]
      }
    }
  ]
}
EOF
}

resource "aws_ssm_association" "llm_association" {
  name           = aws_ssm_document.grafana_setup.name

  targets {
    key    = "tag:aws:autoscaling:groupName"
    values = [aws_autoscaling_group.asg.name]
  }
}



terraform {
  required_providers {
    grafana = {
      source  = "grafana/grafana"
      version = ">= 2.9.0"
    }
  }
}

provider "grafana" {
  url  = ""
  auth = ""
}

data "grafana_data_source" "existing" {
  name = "prometheus"
}

resource "grafana_folder" "alert_folder" {
  title = "EC2 Alerts"
}

resource "grafana_contact_point" "slack" {
  name = "Slack Notifications"

  slack {
    url       = ""  
    recipient = "#alert-test"  
  }
}

resource "grafana_notification_policy" "slack_policy" {
  group_by      = ["alertname"]
  contact_point = grafana_contact_point.slack.name

  group_wait      = "30s"
  group_interval  = "5m"
  repeat_interval = "4h"

  policy {
    matcher {
      label = "alertname"
      match = "=~"
      value = ".*"
    }
  }
}



resource "grafana_rule_group" "ec2_alert_rules" {
  name             = "EC2 Alert Rules"
  folder_uid       = grafana_folder.alert_folder.uid
  interval_seconds = 60

  rule {
    name      = "[llm]-[test]-[ec2]-[low]-[cpu]"
    condition = "C"
    for       = "5m"

    data {
      ref_id = "A"
      relative_time_range {
        from = 600
        to   = 0
      }
      datasource_uid = data.grafana_data_source.existing.uid
      model = jsonencode({
        expr         = "(1 - avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[5m]))) * 100",
        intervalMs    = 1000,
        maxDataPoints = 43200,
        refId         = "A"
      })
    }

    data {
      datasource_uid = "__expr__"
      ref_id         = "B"
      relative_time_range {
        from = 0
        to   = 0
      }
      model = jsonencode({
        type       = "reduce",
        expression = "A",
        reducer    = "mean",
        refId      = "B"
      })
    }

    data {
      datasource_uid = "__expr__"
      ref_id         = "C"
      relative_time_range {
        from = 0
        to   = 0
      }
      model = jsonencode({
        type       = "math",
        expression = "$B < 20",
        refId      = "C"
      })
    }
  }


  rule {
    name      = "[llm]-[test]-[ec2]-[high]-[cpu]"
    condition = "C"
    for       = "5m"

    data {
      ref_id = "A"
      relative_time_range {
        from = 600
        to   = 0
      }
      datasource_uid = data.grafana_data_source.existing.uid
      model = jsonencode({
        expr         = "(1 - avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[5m]))) * 100",
        intervalMs    = 1000,
        maxDataPoints = 43200,
        refId         = "A"
      })
    }

    data {
      datasource_uid = "__expr__"
      ref_id         = "B"
      relative_time_range {
        from = 0
        to   = 0
      }
      model = jsonencode({
        type       = "reduce",
        expression = "A",
        reducer    = "mean",
        refId      = "B"
      })
    }

    data {
      datasource_uid = "__expr__"
      ref_id         = "C"
      relative_time_range {
        from = 0
        to   = 0
      }
      model = jsonencode({
        type       = "math",
        expression = "$B > 80",
        refId      = "C"
      })
    }
  }


  rule {
    name      = "[llm]-[test]-[ec2]-[low]-[memory]"
    condition = "C"
    for       = "5m"

    data {
      ref_id = "A"
      relative_time_range {
        from = 600
        to   = 0
      }
      datasource_uid = data.grafana_data_source.existing.uid
      model = jsonencode({
        expr         = "100 * (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes))",
        intervalMs    = 1000,
        maxDataPoints = 43200,
        refId         = "A"
      })
    }
  
    data {
      datasource_uid = "__expr__"
      ref_id         = "B"
      relative_time_range {
        from = 0
        to   = 0
      }
      model = jsonencode({
        type       = "reduce",
        expression = "A",
        reducer    = "mean",
        refId      = "B"
      })
    }
  
    data {
      datasource_uid = "__expr__"
      ref_id         = "C"
      relative_time_range {
        from = 0
        to   = 0
      }
      model = jsonencode({
        type       = "math",
        expression = "$B < 30",
        refId      = "C"
      })
    }
  }

  rule {
    name      = "[llm]-[test]-[ec2]-[high]-[memory]"
    condition = "C"
    for       = "5m"
  
    data {
      ref_id = "A"
      relative_time_range {
        from = 600
        to   = 0
      }
      datasource_uid = data.grafana_data_source.existing.uid
      model = jsonencode({
        expr         = "100 * (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes))",
        intervalMs    = 1000,
        maxDataPoints = 43200,
        refId         = "A"
      })
    }
  
    data {
      datasource_uid = "__expr__"
      ref_id         = "B"
      relative_time_range {
        from = 0
        to   = 0
      }
      model = jsonencode({
        type       = "reduce",
        expression = "A",
        reducer    = "mean",
        refId      = "B"
      })
    }
  
    data {
      datasource_uid = "__expr__"
      ref_id         = "C"
      relative_time_range {
        from = 0
        to   = 0
      }
      model = jsonencode({
        type       = "math",
        expression = "$B > 90",
        refId      = "C"
      })
    }
  }

rule {
  name      = "[llm]-[test]-[ec2]-[low]-[disk-space]"
  condition = "C"
  for       = "5m"

  data {
    ref_id = "A"
    relative_time_range {
      from = 600
      to   = 0
    }
    datasource_uid = data.grafana_data_source.existing.uid
    model = jsonencode({
      expr         = "100 * (1 - (node_filesystem_free_bytes{job=\"integrations/unix\", device=\"/dev/root\"} / node_filesystem_size_bytes{job=\"integrations/unix\", device=\"/dev/root\"}))",
      intervalMs    = 1000,
      maxDataPoints = 43200,
      refId         = "A"
    })
  }

  data {
    datasource_uid = "__expr__"
    ref_id         = "B"
    relative_time_range {
      from = 0
      to   = 0
    }
    model = jsonencode({
      type       = "reduce",
      expression = "A",
      reducer    = "mean",
      refId      = "B"
    })
  }

  data {
    datasource_uid = "__expr__"
    ref_id         = "C"
    relative_time_range {
      from = 0
      to   = 0
    }
    model = jsonencode({
      type       = "math",
      expression = "$B < 20",
      refId      = "C"
    })
  }
}

rule {
  name      = "[llm]-[test]-[ec2]-[high]-[disk-space]"
  condition = "C"
  for       = "5m"

  data {
    ref_id = "A"
    relative_time_range {
      from = 600
      to   = 0
    }
    datasource_uid = data.grafana_data_source.existing.uid
    model = jsonencode({
      expr         = "100 * (1 - (node_filesystem_free_bytes{job=\"integrations/unix\", device=\"/dev/root\"} / node_filesystem_size_bytes{job=\"integrations/unix\", device=\"/dev/root\"}))",
      intervalMs    = 1000,
      maxDataPoints = 43200,
      refId         = "A"
    })
  }

  data {
    datasource_uid = "__expr__"
    ref_id         = "B"
    relative_time_range {
      from = 0
      to   = 0
    }
    model = jsonencode({
      type       = "reduce",
      expression = "A",
      reducer    = "mean",
      refId      = "B"
    })
  }

  data {
    datasource_uid = "__expr__"
    ref_id         = "C"
    relative_time_range {
      from = 0
      to   = 0
    }
    model = jsonencode({
      type       = "math",
      expression = "$B > 90",
      refId      = "C"
    })
  }
}

}

